import java.text.SimpleDateFormat

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


boolean hasKeyStore = false
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    hasKeyStore = true
} else {
    println "____NOTE____"
    println "No keystore defined. The app will not be signed."
    println "Create a android/key.properties file with the following properties:"
    println "storePassword"
    println "keyPassword"
    println "keyAlias"
    println "storeFile"
    println "____________"
}

android {
    namespace 'com.example.f1_pet_project'
    compileSdk 36

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.f1_pet_project"
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        minSdkVersion 26
        targetSdk 35
        setProperty("archivesBaseName", versionName + "(" + versionCode + ")")
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def branch = "unknown_branch"
            def commitHash = "unknown_commit"
            def buildDate = new SimpleDateFormat("yyyyMMdd").format(new Date())

            try {
                def procBranch = "git rev-parse --abbrev-ref HEAD".execute()
                branch = procBranch.text.trim()

                def procHash = "git rev-parse --short HEAD".execute()
                commitHash = procHash.text.trim()
            } catch (Exception e) {
                println "Error occurred while getting Git info: ${e.message}"
            }

            def newApkName = "${variant.applicationId}_${buildDate}_${variant.buildType.name}_${branch}_${commitHash}.apk"

            outputFileName = newApkName

            println "Output APK: ${newApkName}"
        }
    }

    if (hasKeyStore) {
        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        release {
            if (hasKeyStore) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:2.2.0"
    implementation 'com.yandex.android:maps.mobile:4.3.2-full'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "com.google.android.gms:play-services-base:17.5.0"
    implementation "androidx.work:work-runtime:2.8.1"
    implementation "androidx.work:work-runtime-ktx:2.8.1"
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
}
